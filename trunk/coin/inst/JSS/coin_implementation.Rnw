\documentclass[article]{jss}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% declarations for jss.cls %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% almost as usual
\author{Torsten Hothorn \\ Ludwig--Maximilians--Universit\"at M\"unchen \And
        Kurt Hornik \\Wirtschaftsuniversit\"at Wien \And
        Mark A. van de Wiel \\Vrije Universiteit Amsterdam \And
        Achim Zeileis\\Wirtschaftsuniversit\"at Wien}
\title{Implementing a Class of Permutation Tests \\ The \pkg{coin} Package}

%% for pretty printing and a nice hypersummary also set:
\Plainauthor{Torsten Hothorn, Kurt Hornik, Mark A. van de Wiel, Achim Zeileis} %% comma-separated
\Plaintitle{Implementing a Class of Permutation Tests: The coin Package} %% without formatting
\Shorttitle{Implementing a Class of Permutation Tests} %% a short title (if necessary)

%% an abstract and keywords
\Abstract{ The \pkg{coin} add-on package for \proglang{R} implements a
  unified approach to permutation tests. A huge class of test procedures
  for nominal, ordered, numeric, censored as well as multivariate
  independence-type problems can be embedded into a common theory
  providing a rich and flexible conceptual framework.  We
  propose and discuss an \proglang{S4} class structure and generic functions
  modeling the theory as closely as possible. As a consequence, the
  computational tools implemented by the \pkg{coin} package inherit the
  flexibility provided by the underlying theory. Conditional
  independence tests for location and scale problems for two or multiple
  samples, for two- or three-way contingency tables or for ordered
  categorical and multivariate data can be set-up easily using the
  functionality described here.  With this paper, we provide a
  detailed exposition of a computational framework for permutation 
  tests.
  }

\Keywords{conditional inference, exact distribution, conditional
  Monte-Carlo, categorical data analysis, \proglang{R}}

\Plainkeywords{conditional inference, exact distribution, conditional
  Monte-Carlo, categorical data analysis, R} %% without formatting
%% at least one keyword must be supplied

%% publication information
%% NOTE: This needs to filled out ONLY IF THE PAPER WAS ACCEPTED.
%% If it was not (yet) accepted, leave them commented.
%% \Volume{13}
%% \Issue{9}
%% \Month{September}
%% \Year{2004}
%% \Submitdate{2004-09-29}
%% \Acceptdate{2004-09-29}

%% The address of (at least) one author should be given
%% in the following format:
\Address{

  Torsten Hothorn \\
  Institut f\"ur Statistik \\
  Ludwig-Maximilians-Universit\"at M\"unchen \\
  Ludwigstra{\ss}e 33, D-80539 M\"unchen, Germany \\
  Email: \email{Torsten.Hothorn@R-project.org} \\

  Kurt Hornik and Achim Zeileis\\
  Institut f\"ur Statistik \& Mathematik\\
  Wirtschaftsuniversit\"at Wien\\
  A-1090 Wien, Austria\\
  E-mail: \email{Kurt.Hornik@R-project.org}\\
  E-mail: \email{Achim.Zeileis@R-project.org}\\

  Mark A. van de Wiel \\
  Department of Mathematics, Vrije Universiteit \\
  De Boelelaan 1081a, 1081 HV Amsterdam, The Netherlands \\
  Email: \email{mark.vdwiel@vumc.nl}
}
%% It is also possible to add a telephone and fax number
%% before the e-mail in the following format:
%% Telephone: +43/1/31336-5053
%% Fax: +43/1/31336-734

%% for those who use Sweave please include the following line (with % symbols):
%% need no \usepackage{Sweave.sty}

\input{head}

\SweaveOpts{eps=FALSE,keep.source=TRUE,echo=FALSE}

%% end of declarations %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

<<coin-setup, echo = FALSE, results = hide>>=
library("coin")
set.seed(290875)
### get rid of the NAMESPACE
attach(asNamespace("coin"))

### use UML? http://argouml.tigris.org/

### extract slots of a class
c2t <- function(x) {        

    classdef <- getClassDef(x)

    extends <- names(classdef@contains)[1]
    if (!is.null(extends)) {
        eslots <- names(getClassDef(extends)@slots)
        slots <- classdef@slots[!names(classdef@slots) %in% eslots]
    } else {
        slots <- classdef@slots
    }

    RET <- cbind(names(slots), slots)
    attr(RET, "contains") <- extends 
    attr(RET, "name") <- x
    class(RET) <- "c2t"        
    RET
}
 
### pretty printing
toLatex.c2t <- function(object, center = TRUE, ...) {        

    RET <- c()

    if (center) RET <- c(RET, "\\begin{center}")

    ### class name
    RET <- c(RET, "\\begin{tabular}{ll}",
                  paste("\\multicolumn{2}{l}{Class \\Rclass{", 
                        attr(object, "name"), "}} \\\\", sep = "")) 

    ### extends?
    if (!is.null(attr(object, "contains")))
        RET <- c(RET, paste("\\multicolumn{2}{l}{Contains \\Rclass{", 
                            attr(object, "contains"), "}} \\\\", sep = ""))

    ### slots
    RET <- c(RET, " & \\\\", "Slot & Class \\\\ \\hline ",
             apply(object, 1, function(x) {
                 x <- cbind(paste("\\Rcmd{", x[1], "}", sep = ""),
                            paste("\\Rclass{", x[2], "}", sep = ""))
                 paste(paste(x, collapse = " & "), "\\\\")
             }),
             "\\hline")
    RET <- c(RET, "\\end{tabular}")

    if (center) RET <- c(RET, "\\end{center}")

    class(RET) <- "Latex"
    return(RET)
}
@

\begin{document}

%% include your article here, just as usual
%% Note that you should use the \pkg{}, \proglang{} and \code{} commands.

\section{Introduction}

Conditioning on all admissible permutations of the data for testing 
independence hypotheses is a very old, yet very powerful, idea
\citep{fisher1935,Ernst2004}. Conditional
inference procedures, or simply \textit{permutation} or \textit{re-randomization}
tests, are rather popular and, consequently, are implemented in 
many different statistical computing environments. These implementations
all follow the classical classification scheme of inference procedures and
offer procedures for location problems, scale problems, correlation, 
or nominal and ordered categorical data. Thus, each test procedure is 
implemented separately, maybe with the exception of conditional 
versions of linear rank statistics \citep{theory-of-:-1999}.

Novel theoretical insights by \cite{StrasserWeber1999} open up the way
to a unified treatment of a huge class of permutation
tests. \cite{Hothorn:2006:AmStat} introduce the computational
counterpart of the theoretical framework for permutation tests by
\cite{StrasserWeber1999}. The computational framework is implemented in
the \pkg{coin} add-on package \citep{pkg:coin} to the \proglang{R}
system for statistical computing \citep{rcore2007}. The transition from
theory to practice has been described and illustrated by
\cite{Hothorn:2006:AmStat}. Here, we focus on the design principles the
\pkg{coin} implementation is based upon and on the more technical issues
that need to be addressed in the implementation of such conceptual
tools.

Formal \proglang{S4} classes describe the data model and conditional tests, 
consisting of multivariate linear statistics, univariate test statistics 
and a reference distribution. Generic functions for obtaining
statistics, conditional expectation and covariance matrices as well as 
$p$-value, distribution, density and quantile functions for the reference
distribution are available. 
The most important user-visible function is 
\code{independence\_test}, basically implementing the computational 
counterpart of the theoretical framework of \cite{StrasserWeber1999}. 
This function provides us practically with the same flexibility that 
can be found in the theoretical world. For convenience, some wrapper 
functions
for the most popular test procedures, for example the two-sample and 
$k$-sample permutation tests as \code{oneway\_test}, are offered as 
well.




\section{Theory and Classes}

We first focus on the conceptual framework for conditional inference procedures
as proposed by \cite{StrasserWeber1999} along with the class structure the \pkg{coin}
package is based upon. Formal \proglang{S4} classes defining data objects, objects describing
the inference problem and conditional test procedure are introduced and explained.

We deal with variables $\Y$ and $\X$ from sample spaces 
$\mathcal{Y}$ and $\mathcal{X}$ which may
be measured at arbitrary scales and may be multivariate as well.
In addition, a factor $b$ measured at $k$ levels indicates a certain block
structure of the observations, for example centers in a multi-center randomized
clinical trial where only a re-randomization of observations within blocks
is admissible. 
We are interested in testing the null hypothesis
\begin{eqnarray*}
  H_0: D(\Y | \X, b) = D(\Y | b)
\end{eqnarray*}
of conditional independence of $\Y$ and $\X$ within blocks~$b$ against
arbitrary alternatives.

\subsection{Data}

In the following we assume that we are provided with $n$ observations 
\begin{eqnarray*}
(\Y_i, \X_i, b_i, w_i), \quad i = 1, \dots, n.
\end{eqnarray*}
In addition to variables $\X$, $\Y$, and $b$ it is convenient (for
example to efficiently represent large contingency tables)
to allow for some integer-valued case weights $w_i$, indicating
that $w_i$ observations with realizations $\Y_i$, $\X_i$ and $b_i$ 
are available, with default $w_i \equiv 1$.
This data structure is represented by class \Rclass{IndependenceProblem}:
<<IndependenceProblem, results = tex>>=
toLatex(c2t("IndependenceProblem"))
@

\subsection{Inference Problem and Linear Statistic}

\cite{StrasserWeber1999} suggest to derive
scalar test statistics for testing $H_0$ from multivariate linear statistics
of the form 
\begin{eqnarray} \label{linstat}
\T =  \sum_{j = 1}^k \T_j \in \R^{pq}
\end{eqnarray}
where the linear statistic for each block is given by
\begin{eqnarray*}
\T_j = \vec\left(\sum_{i = 1}^n I(b_i = j) w_i g(\X_i) h(\Y_i)^\top\right)
\in \R^{pq}.
\end{eqnarray*}
with `vec' and ${}^\top$ denoting the vec operator (which stacks the
columns of a matrix one underneath the other) and transpose,
respectively.  
Here, $g: \mathcal{X} \rightarrow \R^{p \times 1}$ is a transformation of
the $\X$ measurements and $h: \mathcal{Y} \rightarrow
\R^{q \times 1}$ is called \emph{influence function}. The function $h(\Y_i)
= h(\Y_i, (\Y_1, \dots, \Y_n))$ may depend on the full vector of responses
$(\Y_1, \dots, \Y_n)$, however only 
in a permutation symmetric way, i.e., the value of the
function must not depend on the order in which $\Y_1, \dots, \Y_n$ appear.
The transformation~$g$ and influence function $h$ as well as 
$g(\X_i)$ and $h(\Y_i), i = 1, \dots, n$, are attached to the data structure
by extending class \Rclass{IndependenceProblem}:
<<IndependenceTestProblem, results = tex>>=
toLatex(c2t("IndependenceTestProblem"))
@
The \code{ytrafo} and \code{xtrafo} slots correspond to the influence
function $h$ and transformation $g$, respectively. The $i$th row of the 
$n \times q$ matrix \code{ytrans} corresponds to $h(\Y_i)$. Similar, 
the rows of \code{xtrans} ($n \times p$) correspond to $g(\X_i)$.

\subsection{Conditional Expectation and Covariance}

The distribution of $\T$  depends on the joint
distribution of $\Y$ and $\X$, which is unknown under almost all practical
circumstances. At least under the null hypothesis one can dispose of this
dependency by fixing $\X_1, \dots, \X_n$ and conditioning on all possible
permutations $S_j$ of the responses $\Y_1, \dots, \Y_n$ in block $j, j = 1, \dots, k$. 

The conditional expectation $\mu \in \R^{pq}$ and covariance 
$\Sigma \in \R^{pq \times pq}$ 
of $\T$ under $H_0$ given
all permutations $\sigma \in S$ of the responses are derived by
\cite{StrasserWeber1999} and are re-stated in the following.

Let $w_{\cdot j} = \sum_{i = 1}^n I(b_i = j)w_i$ denote the sum of the weights
in block $j$. The conditional expectation of the influence 
function $h$ in block $j$ 
\begin{eqnarray*}
\E(h | S_j) = w_{\cdot j}^{-1} \sum_i I(b_i = j)w_i h(\Y_i) \in \R^q
\end{eqnarray*}
with corresponding $q \times q$ covariance matrix
\begin{eqnarray*}
\V(h | S_j) = w_{\cdot j}^{-1} \sum_i I(b_i = j)w_i \left(h(\Y_i) - \E(h | S_j)
\right) \left(h(\Y_i) - \E(h | S_j)\right)^\top.
\end{eqnarray*}
The conditional expectation and covariance of the linear statistic
$\T_j$ in block $j$ are
\begin{eqnarray*}
\mu_j & = & \E(\T | S_j) = \vec \left( \left( \sum_{i = 1}^n I(b_i = j)w_i g(\X_i) \right) \E(h | S_j)^\top
\right)
\end{eqnarray*}
and
\begin{eqnarray*}
\Sigma_j & = & \V(\T | S_j) \nonumber \\
& = &
    \frac{w_{\cdot j}}{w_{\cdot j} - 1}  \V(h | S_j) \otimes
        \left(\sum_i I(b_i = j) w_i  \left( g(\X_i) \otimes g(\X_i)^\top\right) \right)
\label{expectcovar}
\\
& - & \frac{1}{w_{\cdot j} - 1}  \V(h | S_j)  \otimes \left(
        \sum_i I(b_i = j) w_i g(\X_i) \right)
\otimes \left( \sum_i I(b_i = j) w_i g(\X_i)\right)^\top
\nonumber
\end{eqnarray*}
respectively, where $\otimes$ is the Kronecker product. The conditional
expectation and covariance of $\T$, aggregated over all $k$ blocks, are
then given by
\begin{eqnarray*}
\mu  = \sum_{j = 1}^k \mu_j, \qquad \Sigma = \sum_{j = 1}^k \Sigma_j.
\end{eqnarray*}


The linear statistic $\T$, its conditional expectation and covariance 
are stored in objects of class \Rclass{IndependenceLinearStatistic}:
<<IndependenceLinearStatistic, results = tex>>=
toLatex(c2t("IndependenceLinearStatistic"))
@
Class \Rclass{VarCovar} represents either a complete covariance matrix 
or its diagonal elements only. 

\subsection{Test Statistics}

Univariate test statistics~$c$ mapping an observed linear
statistic $\mathbf{t} \in
\R^{pq}$ into the real line can be of arbitrary form. 
Having the conditional expectation and covariance at hand we are able to
standardize an observed linear statistic $\t \in \R^{pq}$ of the form
(\ref{linstat}) by
\begin{eqnarray*}
\frac{\mathbf{t} - \mu}{\text{diag}(\Sigma)^{1/2}}.
\end{eqnarray*}
In case of univariate linear statistics $\t$ (with $pq = 1$), the test statistic $c$
is simply the standardized linear statistic
\begin{eqnarray*}
c_\text{scalar}(\t, \mu, \Sigma) = \frac{\t - \mu}{\sqrt{\Sigma}}.
\end{eqnarray*} 
In the multivariate case ($pq > 1$), a maximum-type statistic of the form
\begin{eqnarray*}
c_\text{max}(\mathbf{t}, \mu, \Sigma)  = \max \left| \frac{\mathbf{t} -
\mu}{\text{diag}(\Sigma)^{1/2}} \right|
\end{eqnarray*}
is appropriate. This version for the two-sided situation is to be replaced by
\begin{eqnarray*}
\min \left( \frac{\mathbf{t} - \mu}{\text{diag}(\Sigma)^{1/2}} \right)
    \quad \text{(less) and } 
\max \left( \frac{\mathbf{t} - \mu}{\text{diag}(\Sigma)^{1/2}} \right)
    \quad \text{(greater)}
\end{eqnarray*}
in the one-sided case.
The definition of one- and two-sided $p$-values used for the computations in
the \pkg{coin} package is 

\begin{center}
\begin{tabular}{ll}
less: & $\Prob(c(\T, \mu, \Sigma) \le c(\mathbf{t}, \mu, \Sigma))$ \\
greater: & $\Prob(c(\T, \mu, \Sigma) \ge c(\mathbf{t}, \mu, \Sigma))$ \\
two-sided: & $\Prob(|c(\T, \mu, \Sigma)| \le |c(\mathbf{t}, \mu, \Sigma)|)$.
\end{tabular}
\end{center}

Test statistics are represented by class \Rclass{IndependenceTestStatistic}
<<IndependenceTestStatistic, results = tex>>=
toLatex(c2t("IndependenceTestStatistic"))
@
The slot \Rarg{standardizedlinearstatistic}
contains the (possibly multivariate) linear statistic standardized by its 
conditional expectation and variance. An univariate test statistic $c$ is
stored in slot \Rarg{teststatistic}. The \Rarg{estimates} slot
may contain parameter estimates where available.

For univariate statistics $c_\text{scalar}$ a special class
<<ScalarIndependenceTestStatistic, results = tex>>=
toLatex(c2t("ScalarIndependenceTestStatistic"))
@
is available. For the more general case, maximum-type statistics are represented by
objects of class \Rclass{MaxTypeIndependenceTestStatistic}:
<<MaxTypeIndependenceTestStatistic, results = tex>>=
toLatex(c2t("MaxTypeIndependenceTestStatistic"))
@
both defining a character vector specifying the alternative to 
test against (\Rcmd{"two.sided"}, \Rcmd{"greater"} and \Rcmd{"less"}).

Alternatively, a quadratic form $c_\text{quad}(\mathbf{t}, \mu, \Sigma)  =
(\mathbf{t} - \mu) \Sigma^+ (\mathbf{t} - \mu)^\top$ can be used as test statistic. It
is computationally more expensive because the Moore-Penrose 
inverse $\Sigma^+$ of $\Sigma$ is involved. Such statistics are represented
by objects of class \Rclass{QuadTypeIndependenceTestStatistic} defining slots 
for $\Sigma^+$ and its rank (degrees of freedom):
<<QuadTypeIndependenceTestStatistic, results = tex>>=
toLatex(c2t("QuadTypeIndependenceTestStatistic"))
@

\subsection{Conditional Null Distribution}

The conditional distribution and thus the $p$-value
of the statistic $c(\mathbf{t}, \mu, \Sigma)$ can be
computed in several different ways. For some special forms of the
linear statistic, the exact distribution of the test statistic is tractable.
For two-sample problems, the shift-algorithm by \cite{axact-dist:1986,exakte-ver:1987} 
and the split-up algorithm by 
\cite{vdWiel2001} are implemented as part of the package.
Conditional Monte-Carlo procedures can be used to approximate the exact
distribution. \citet[Theorem 2.3]{StrasserWeber1999} proved that the   
conditional distribution of linear statistics $\T$ with conditional    
expectation $\mu$ and covariance $\Sigma$ tends to a multivariate normal
distribution with parameters $\mu$ and $\Sigma$ as $w_{\cdot j} \rightarrow \infty$ for all $j = 1, \dots, k$. 
Thus, the asymptotic conditional distribution of test statistics of the
form $c_\text{max}$ is normal and
can be computed directly in the univariate case ($pq = 1$)
or approximated by means of quasi-randomized Monte-Carlo  
procedures in the multivariate setting \citep{numerical-:1992}. For
quadratic forms
$c_\text{quad}$ which follow a $\chi^2$ distribution with degrees of freedom 
given by the rank of $\Sigma$ \citep[see][Chapter 29]{johnsonkotz1970}, exact
asymptotic probabilities can be computed efficiently.

A null distribution is represented by either a distribution (and $p$-value) function
only
<<PValue, results = tex>>=
toLatex(c2t("PValue"))
@
or, where possible, is enriched by its density and quantile function:
<<NullDistribution, results = tex>>=
toLatex(c2t("NullDistribution"))
@
Currently, there are three classes extending \Rclass{NullDistribution} (without 
defining additional slots at the moment): \Rclass{ExactNullDistribution} (exact conditional
null distribution, computed for example via the shift-algorithm),
\Rclass{ApproxNullDistribution} (approximations of the exact conditional 
distribution using conditional Monte-Carlo procedures) and \Rclass{AsymptNullDistribution}
(asymptotic approximations via multivariate normal or $\chi^2$ distribution).
A new method for computing or approximating the conditional distribution
can be implemented by defining a dedicated class (and corresponding methods) 
extending \Rclass{NullDistribution}.

For maximum-type statistics $c_\text{max}$, single-step and step-down
multiplicity adjusted $p$-values based on the limiting distribution and
conditional Monte-Carlo methods \citep[see][]{WestfallYoung1993} are
available as well.

\subsection{Conditional Tests}

A conditional test is represented by a test statistic and its conditional null 
distribution (or an approximation thereof). In addition, 
a character string giving the name of the test procedure is defined 
in class \Rclass{IndependenceTest}:
<<IndependenceTest, results = tex>>=
toLatex(c2t("IndependenceTest"))
@


\section{Generic Functions}

Methods for the following generic functions are defined for 
class \Rclass{IndependenceTestStatistic}:
\begin{description}
\item[\Rcmd{statistic()}:] extracts the linear statistic $\T$, 
                           the standardized statistic or test statistic.
\item[\Rcmd{expectation()}:] extracts the conditional expectation $\mu$.
\item[\Rcmd{covariance()}:] extracts the complete conditional covariance matrix 
                            $\Sigma$ (if available).
\item[\Rcmd{variance()}:] extracts the diagonal elements of the conditional covariance matrix
                          $\text{diag}(\Sigma)$.
\end{description}

For conditional null distributions (class \Rclass{NullDistribution}),
the following methods are available:
\begin{description}
\item[\Rcmd{pvalue()}:] computes the $p$-value (plus a confidence interval, in case
 Monte-Carlo procedures have been used) based on an observed test statistic $c$ and its
 conditional null distribution.
\item[\Rcmd{pperm()}:] evaluates the distribution function.
\item[\Rcmd{dperm()}:] evaluates the density function. 
\item[\Rcmd{qperm()}:] evaluates the quantile function.
\item[\Rcmd{support()}:] returns the support of the null distribution.
\end{description}
Of course, all methods are defined for objects inheriting from class 
\Rclass{IndependenceTest} as well. In addition, \Rcmd{show()} methods
are defined for classes \Rclass{ScalarIndependenceTest}, \Rclass{MaxTypeIndependenceTest}
and \Rclass{QuadTypeIndependenceTest}, converting these \proglang{S4} 
objects to an informal \proglang{S3} object of class \Rclass{htest} for which
a \Rcmd{print()} method most \proglang{R} users are familiar with is available.

For the conditional versions of two-sample linear rank statistics for
location and scale parameters \citep{theory-of-:-1999}, e.g., Wilcoxon-Mann-Whitney,
Normal Scores and Ansari-Bradley tests, parameter estimates and
confidence intervals based on the conditional distribution of the test statistics
are implemented following the methods proposed by \cite{constructi:1972}. 
A \Rcmd{confint()} method is available for these special cases.


\section{User Interfaces}

While the internal structures make use of the \proglang{S4} class
system, the user interface is written in \proglang{S3} style to mimic
the familiar user interfaces of the classical tests, such as
\Rcmd{wilcox.test}, as closely as possible. Formula and table methods
are implemented for \Rcmd{independence\_test} and wrapper functions
(where appropriate); existing methods for \Rclass{htest} are utilized
for formatting output.

\subsection{General Independence Tests}

The \proglang{S3} generic function \Rcmd{independence\_test} has methods
for tables (in case both $\X$ and $\Y$ are univariate factors), formulae
and objects of class \Rclass{IndependenceProblem}.  The definition of
the latter is
\begin{Sinput}
independence_test(object, 
    teststat = c("max", "quad", "scalar"),
    distribution = c("asymptotic", "approximate", "exact"),
    alternative = c("two.sided", "less", "greater"),
    xtrafo = trafo, ytrafo = trafo, scores = NULL, 
    check = NULL, ...)
\end{Sinput}
Here, \Robject{object} describes the data and thus the null hypothesis. Argument 
\Rarg{xtrafo} refers to the transformation $g$ and \Rarg{ytrafo} to the 
influence function $h$ (function \Rcmd{trafo} implements reasonable defaults, 
see below) defining the linear statistic and its conditional expectation and covariance.
Three types of test statistics are hard-coded. The (approximation) of the 
null distribution to be used as reference distribution can be chosen either by a
character string or by functions \Rcmd{exact()}, \Rcmd{approximate()} and \Rcmd{asymptotic()}
which also take care of the correct specification of additional arguments, 
such as the number of permutations to draw randomly in a conditional Monte-Carlo procedure.
This mechanism allows for user-supplied algorithms to compute or
approximate the exact conditional distribution: A function taking an
object inheriting from \Rclass{IndependenceTestStatistic} and returning
an object of class \Rclass{NullDistribution} can be specified as \Rcmd{distribution}
argument to \Rcmd{independence\_test}.

By default, the identify transformation is used for both $g$ and $h$ in case of numeric
variables $\X$ and $\Y$, respectively (function \Rcmd{id\_trafo}). Factors
are dummy-encoded (function \Rcmd{f\_trafo}) and censored variables are transformed to
log rank scores:
\begin{Sinput}
trafo(data, numeric_trafo = id_trafo, 
    factor_trafo = f_trafo, surv_trafo = logrank_trafo, 
    var_trafo = NULL, block = NULL)
\end{Sinput}
The framework is extensible by user-supplied transformations $g$ or influence functions $h$ 
specified as arguments to \Rcmd{trafo()}.

\subsection{Formula and Table Methods}

A \Rclass{formula} interface as well as a \Rclass{table} method for
\Rcmd{independence\_test} are available in addition. The left hand side
variables of a formula are interpreted as $\Y$ variables (univariate or
possibly multivariate), the right hand side is taken for $\X$
(univariate or multivariate as well). The blocking factor can specified
after a vertical bar.  So, for example, the formula
\begin{Sinput}
y1 + y2 ~ x1 + x2 | block
\end{Sinput}
leads to a test of independence between two $\Y$ variables and two $\X$ variables (in case
all variables are numeric the linear statistic is four-dimensional with 
$p = 2$ and $q = 2$) for each level in \Robject{block}. As usual, \Rarg{data}, \Rarg{weights}
and \Rarg{subset} arguments can be specified as well.

Two- and three-dimensional tables can be supplied to the \Rclass{table} method of
\Rcmd{independence\_test}. The third variable is then interpreted as block.

\subsection{Specialized Convenience Functions}

For a variety of classical tests (some of them already implemented in
base package \pkg{stats}), their conditional counterpart is made easily
accessible. Wrapper functions for the most important procedures, such as
the Wilcoxon Mann-Whitney or Cochran-Mantel-Haenszel tests, are listed
in Table~\ref{confct}.  Almost all special-purpose functionality
implemented in packages \pkg{exactRankTests}
\citep{Rnews:Hothorn:2001,HothornHornik:2002:CompStat,pkg:exactRankTests}
and \pkg{maxstat} \citep{Rnews:Hothorn+Lausen:2002,pkg:maxstat} can
conveniently be provided within the \pkg{coin} framework, so that both
these packages will become deprecated in the future.


\begin{sidewaystable}
\begin{center}
\begin{tabular}{lllll} \\
%%%\multicolumn{5}{c}{Independent Samples} \\
Test & Wrapper Function & \Rcmd{xtrafo} $g$ & \Rcmd{ytrafo} $h$ & \Rcmd{teststat} $c$ \\ \hline
\multicolumn{5}{c}{} \\
\multicolumn{5}{c}{Independent Samples} \\
\multicolumn{5}{c}{} \\
Wilcoxon-Mann-Whitney & \Rcmd{wilcox\_test()} & \Rcmd{f\_trafo()} & \Rcmd{rank()} &
\Rcmd{"scalar"} \\
Normal Quantiles & \Rcmd{normal\_test()} & \Rcmd{f\_trafo()} & \Rcmd{normal\_trafo()} &
\Rcmd{"scalar"} \\
Median & \Rcmd{median\_test()} & \Rcmd{f\_trafo()} & \Rcmd{median\_trafo()} &
\Rcmd{"scalar"} \\
Ansari-Bradley & \Rcmd{ansari\_test()} & \Rcmd{f\_trafo()} & \Rcmd{ansari\_trafo()} &
\Rcmd{"scalar"} \\
Log Rank & \Rcmd{surv\_test()} & \Rcmd{f\_trafo()} & \Rcmd{logrank\_trafo()} &
\Rcmd{"quad"} \\
Kruskal-Wallis & \Rcmd{kruskal\_test()} & \Rcmd{f\_trafo()} & \Rcmd{rank()} &
\Rcmd{"quad"} \\
Fligner & \Rcmd{fligner\_test()} & \Rcmd{f\_trafo()} & \Rcmd{fligner\_trafo()} &
\Rcmd{"quad"} \\
Spearman & \Rcmd{spearman\_test()} & \Rcmd{rank()} & \Rcmd{rank()} &
\Rcmd{"scalar"} \\
Cochran-Mantel-Haenszel & \Rcmd{cmh\_test()} & \Rcmd{f\_trafo()} & \Rcmd{f\_trafo()} &
\Rcmd{"quad"} \\
Pearson's $\chi^2$ & \Rcmd{chisq\_test()} & \Rcmd{f\_trafo()} & \Rcmd{f\_trafo()} &
\Rcmd{"quad"} \\
Cochran-Armitage / Linear Association & \Rcmd{lbl\_test()} & Scores & any &
\Rcmd{"scalar"} \\
$K$-Sample Permutation test & \Rcmd{oneway\_test()} & \Rcmd{f\_trafo()} & any & any \\
Maximally Selected Statistics & \Rcmd{maxstat\_test()} & \Rcmd{maxstat\_trafo()} & any & \Rcmd{"max"} \\
\multicolumn{5}{c}{} \\
\multicolumn{5}{c}{Dependent Samples} \\
\multicolumn{5}{c}{} \\
Friedman & \Rcmd{friedman\_test()} & \Rcmd{f\_trafo()} & \Rcmd{rank()} &
\Rcmd{"quad"} \\
Maxwell-Stuart & \Rcmd{mh\_test()} & \Rcmd{f\_trafo()} & \Rcmd{f\_trafo()} &
\Rcmd{"quad"} \\
Wilcoxon Signed Rank & \Rcmd{wilcoxsign\_test()} & \Rcmd{f\_trafo()} & \Rcmd{rank()} &
\Rcmd{"scalar"} \\ \hline
\end{tabular}
\caption{Convenience functions implementing the conditional counterparts of 
         the most important classical tests. \label{confct}}
\end{center}
\end{sidewaystable}

\section{Internal Functionality}

The core functionality, i.e., a small set of 
functions computing the linear statistic $\T$ for the original data as well
for permuted versions of the original data, the conditional expectation~$\mu$
and conditional covariance matrix~$\Sigma$, is coded in \proglang{C}. 
The shift and split-up algorithms \citep{axact-dist:1986,exakte-ver:1987,vdWiel2001}
for computing the exact null distribution in univariate two-sample problems
as well as conditional Monte-Carlo procedures for approximating the
exact conditional null distribution are implemented in \proglang{C} as well.
(In addition,
some helper functions, e.g., the Kronecker product etc., are coded in \proglang{C}.)
The complete \proglang{C} source code and its documentation can be accessed via
<<coin-doxygen, echo = TRUE, eval = FALSE>>=
browseURL(system.file("documentation", "html", "index.html", 
                      package = "coin"))
@
The naming scheme of the \proglang{C} routines distinguishes between functions
only called at \proglang{C} level (\code{C\_<foo>}) and functions which can 
be called from \proglang{R} via the \code{.Call} interface (\code{R\_<foo>}). 
Such functions are available for most of the internal \proglang{C} functions to enable
unit testing.


\section{An Example}

The job satisfaction data \citep[Table 7.8,][]{agresti2002} is a
three-dimensional contingency table with variables \Robject{Income} and
\Robject{Job.Satisfaction} according to \Robject{Gender} (labels
slightly modified for convenience):
<<js, echo = TRUE>>=
js <- jobsatisfaction
dimnames(js)$Job.Satisfaction <- c("VeryDiss", "ModDiss", 
                                   "ModSat", "VerySat")
ftable(Job.Satisfaction ~ Gender + Income, data = js)
@
Here, we focus on conditional tests on independence 
of income and job satisfaction. The conditional Cochran-Mantel-Haenszel test is
based on a $\chi^2$ (quadratic form) statistic derived from the contingency table
and a $\chi^2$ approximation of the null distribution is utilized traditionally:
<<jobsatisfaction-it, echo = TRUE>>=
independence_test(js, teststat = "quad")
@
which is the same as 
<<jobsatisfaction-it, echo = TRUE>>=
cmh_test(js)
@
with linear statistic
<<jobsatisfaction-T, echo = TRUE>>=
statistic(cmh_test(js), "linear")
@
This is the exactly the two-way classification
<<jobsatisfaction-margin, echo = TRUE>>=
margin.table(js, 1:2)
@
i.e., the three-dimensional table aggregated over the block factor \Robject{Gender}.
This contingency table in standardized form reads
<<jobsatisfaction-stat, echo = TRUE>>=
statistic(cmh_test(js), "standardized")
@
Instead of using a $\chi^2$ statistic collapsing the whole table via a quadratic form, one might
want to use the maximum of the absolute values of the standardized cells as test statistic.
This new test (at least we are not aware of a name for such a procedure)
is set up  easily:
<<jobsatisfaction-max, echo = TRUE>>=
independence_test(js, teststat = "max")
@
with its conditional asymptotical null distribution being 
available immediately (because of the joint multivariate normal probability
of the contingency table $\T$). Single-step adjusted $p$-values for each
cell of the contingency table corresponding to this maximum-test
can be computed via
<<jobsatisfaction-minp, echo = TRUE>>=
pvalue(independence_test(js, teststat = "max"), 
       method = "single-step")
@
Taking the ordinal scale level of both
variables into account, a linear by linear association test \citep{agresti2002}
is easily performed
<<jobsatisfaction-ordinal, echo = TRUE>>=
it <- independence_test(js, 
    scores = list(Job.Satisfaction = c(1, 3, 4, 5),
                  Income = c(3, 10, 20, 35)),
    distribution = approximate(B = 10000))
pvalue(it)
@
For more practical examples, including applications with numeric variables, 
we refer to \cite{Hothorn:2006:AmStat}.

\section{Quality Assurance}

The test procedures implemented in package \pkg{coin} are continuously
checked against results obtained by the corresponding implementations in
package \pkg{stats} (where available). In addition, the test statistics
and exact, approximate and asymptotic $p$-values for data examples
given in the \pkg{StatXact-6} user manual \citep{StatXact6} are compared
with the results reported there. Step-down multiple adjusted $p$-values
have been checked against results reported by \Rcmd{mt.maxT} from
package \pkg{multtest} \citep{PKG:multtest}. For details on the test
procedures we refer to the \proglang{R} transcript files in directory
\code{coin/tests} of the \pkg{coin} package sources.

\section{Computational Details}

The class structure, internal functionality, user interface and examples are
based on \pkg{coin} version \Sexpr{packageDescription("coin")$Version}, available
under the terms of the General Public License from \url{CRAN.R-project.org}. 
\proglang{R} version \Sexpr{paste(version$major, version$minor, sep = ".")} was used for 
the computations, see \url{www.R-project.org}.

\section*{Acknowledgments}
 
We would like to thank Helmut Strasser for discussions on the theoretical framework.
Henric Nilsson provided clarification and examples for the Stuart-Maxwell test and helped
identifying bugs. The work of T. Hothorn was supported by Deutsche Forschungsgemeinschaft (DFG) 
under grant HO 3242/1-3.

\bibliography{coin_jss}

\end{document}
