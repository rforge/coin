\documentclass[article]{jss}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% declarations for jss.cls %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% almost as usual
\author{Torsten Hothorn \\ Friedrich--Alexander--Universit\"at \\ Erlangen--N\"urnberg \And
        Kurt Hornik \\Wirtschaftsuniversit\"at Wien \And
        Mark A. van de Wiel \\Vrije Universiteit Amsterdam \And
        Achim Zeileis\\Wirtschaftsuniversit\"at Wien}
\title{Implementing a Class of Permutation Tests \\ The \pkg{coin} Package}

%% for pretty printing and a nice hypersummary also set:
\Plainauthor{Torsten Hothorn, Kurt Hornik, Mark A. van de Wiel, Achim Zeileis} %% comma-separated
\Plaintitle{Implementing a Class of Permutation Tests: The coin Package} %% without formatting
\Shorttitle{Implementing a Class of Permutation Tests} %% a short title (if necessary)

%% an abstract and keywords
\Abstract{
  Internal structure of \pkg{coin} and design of user interfaces.
}
\Keywords{conditional inference, \proglang{R}}
\Plainkeywords{conditional inference, R} %% without formatting
%% at least one keyword must be supplied

%% publication information
%% NOTE: This needs to filled out ONLY IF THE PAPER WAS ACCEPTED.
%% If it was not (yet) accepted, leave them commented.
%% \Volume{13}
%% \Issue{9}
%% \Month{September}
%% \Year{2004}
%% \Submitdate{2004-09-29}
%% \Acceptdate{2004-09-29}

%% The address of (at least) one author should be given
%% in the following format:
\Address{

  Torsten Hothorn \\
  Institut f\"ur Medizininformatik, Biometrie und Epidemiologie\\
  Friedrich-Alexander-Universit\"at Erlangen-N\"urnberg\\
  Waldstra{\ss}e 6, D-91054 Erlangen, Germany \\  
  Email: \email{Torsten.Hothorn@R-project.org} \\

  Kurt Hornik and Achim Zeileis\\
  Institut f\"ur Statistik \& Mathematik\\
  Wirtschaftsuniversit\"at Wien\\
  1090 Wien, Austria\\
  E-mail: \email{Kurt.Hornik@R-project.org}\\
  E-mail: \email{Achim.Zeileis@R-project.org}\\

  Mark A. van de Wiel \\
  Department of Mathematics, Vrije Universiteit \\
  De Boelelaan 1081a, 1081 HV Amsterdam, The Netherlands \\
  Email: \email{mark.vdwiel@vumc.nl}
}
%% It is also possible to add a telephone and fax number
%% before the e-mail in the following format:
%% Telephone: +43/1/31336-5053
%% Fax: +43/1/31336-734

%% for those who use Sweave please include the following line (with % symbols):
%% need no \usepackage{Sweave.sty}

\input{head}

\SweaveOpts{eps=FALSE,keep.source=TRUE,echo=FALSE}

%% end of declarations %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

<<coin-setup, echo = FALSE, results = hide>>=
library("coin")
set.seed(290875)
### get rid of the NAMESPACE
load(file.path(.find.package("coin"), "R", "all.rda"))

### extract slots of a class
c2t <- function(x) {        

    classdef <- getClassDef(x)

    extends <- names(classdef@contains)[1]
    if (!is.null(extends)) {
        eslots <- names(getClassDef(extends)@slots)
        slots <- classdef@slots[!names(classdef@slots) %in% eslots]
    } else {
        slots <- classdef@slots
    }

    RET <- cbind(names(slots), slots)
    attr(RET, "contains") <- extends 
    attr(RET, "name") <- x
    class(RET) <- "c2t"        
    RET
}
 
### pretty printing
toLatex.c2t <- function(object, center = TRUE, ...) {        

    RET <- c()

    if (center) RET <- c(RET, "\\begin{center}")

    ### class name
    RET <- c(RET, "\\begin{tabular}{ll}",
                  paste("\\multicolumn{2}{l}{Class \\Rclass{", 
                        attr(object, "name"), "}} \\\\", sep = "")) 

    ### extends?
    if (!is.null(attr(object, "contains")))
        RET <- c(RET, paste("\\multicolumn{2}{l}{Contains \\Rclass{", 
                            attr(object, "contains"), "}} \\\\", sep = ""))

    ### slots
    RET <- c(RET, " & \\\\", "Slot & Class \\\\ \\hline ",
             apply(object, 1, function(x) {
                 x <- cbind(paste("\\Rcmd{", x[1], "}", sep = ""),
                            paste("\\Rclass{", x[2], "}", sep = ""))
                 paste(paste(x, collapse = " & "), "\\\\")
             }),
             "\\hline")
    RET <- c(RET, "\\end{tabular}")

    if (center) RET <- c(RET, "\\end{center}")

    class(RET) <- "Latex"
    return(RET)
}
@

\begin{document}

%% include your article here, just as usual
%% Note that you should use the \pkg{}, \proglang{} and \code{} commands.

\section{Introduction}
%% Note: If there is markup in \(sub)section, then it has to be escape as above.

\section{Theory and Classes}

In this section we present the conceptual framework for conditional inference procedures
as proposed by \cite{StrasserWeber1999} along with the class structure the \pkg{coin}
package is based on. Formal \proglang{S4} classes define data objects, objects describing
the inference problem and conditional test procedure consisting of data, statistics, 
and null distribution.

\subsection{Data}

In the following we assume that we are provided with $n$ observations 
\begin{eqnarray*}
(\Y_i, \X_i, w_i, b_i), \quad i = 1, \dots, n.
\end{eqnarray*}
The variables $\Y$ and $\X$ from sample spaces $\mathcal{Y}$ and
$\mathcal{X}$ may
be measured at arbitrary scales and may be multivariate as well. In addition
to those measurements, case weights $w$ and a factor $b$ coding for $k$ blocks 
($b_i = 1, \dots, k$) may
be available. The data structure is represented by class \Rclass{IndependenceProblem}:
<<IndependenceProblem, results = tex>>=
toLatex(c2t("IndependenceProblem"))
@

\subsection{Inference Problem and Linear Statistic}

We are interested in testing the null hypothesis of independence of $\Y$ and
$\X$
\begin{eqnarray*}
H_0: D(\Y | \X) = D(\Y)
\end{eqnarray*}
against arbitrary alternatives. \cite{StrasserWeber1999} suggest to derive
scalar test statistics for testing $H_0$ from multivariate linear statistics
of the form 
\begin{eqnarray} \label{linstat}
\T_j = \vec\left(\sum_{i = 1}^n I(b_i = j) w_i g(\X_i) h(\Y_i)^\top\right)
\in \R^{pq} \text{ with } \T =  \sum_{j = 1}^k \T_j
\end{eqnarray}
Here, $g: \mathcal{X} \rightarrow \R^{p \times 1}$ is a transformation of
the $\X$ measurements and $h: \mathcal{Y} \rightarrow
\R^{q \times 1}$ is called \emph{influence function}. The function $h(\Y_i)
= h(\Y_i, (\Y_1, \dots, \Y_n))$ may depend on the full vector of responses
$(\Y_1, \dots, \Y_n)$, however only 
in a permutation symmetric way, i.e., the value of the
function must not depend on the order in which $\Y_1, \dots, \Y_n$ appear.
The transformation $g$ and influence function $h$ as well as 
$g(\X_i)$ and $h(\Y_i), i = 1, \dots, n$, are attached to the data structure
by extending class \Rclass{IndependenceProblem}:
<<IndependenceTestProblem, results = tex>>=
toLatex(c2t("IndependenceTestProblem"))
@

\subsection{Conditional Expectation and Covariance}

The distribution of $\T$  depends on the joint
distribution of $\Y$ and $\X$, which is unknown under almost all practical
circumstances. At least under the null hypothesis one can dispose of this
dependency by fixing $\X_1, \dots, \X_n$ and conditioning on all possible
permutations $S_j$ of the responses $\Y_1, \dots, \Y_n$ in block $j = 1, \dots, k$. 
This principle leads to test procedures known
as \textit{permutation tests}. 

The conditional expectation $\mu \in \R^{pq}$ and covariance 
$\Sigma \in \R^{pq \times pq}$ 
of $\T$ under $H_0$ given
all permutations $\sigma \in S$ of the responses are derived by
\cite{StrasserWeber1999}.

Let $w_{\cdot j} = \sum_{i = 1}^n I(b_i = j)w_i$ denote the sum of the weights
in block $j$. The conditional expectation of the influence function $h$ in block $j$ is
\begin{eqnarray*}
\E(h | S_j) = w_{\cdot j}^{-1} \sum_i I(b_i = j)w_i h(\Y_i) \in \R^q
\end{eqnarray*}
with corresponding $q \times q$ covariance matrix
\begin{eqnarray*}
\V(h | S_j) = w_{\cdot j}^{-1} \sum_i I(b_i = j)w_i \left(h(\Y_i) - \E(h | S_j)
\right) \left(h(\Y_i) - \E(h | S_j)\right)^\top.
\end{eqnarray*}
The conditional expectation of the linear statistic $\T_j$ in block $j$ is 
\begin{eqnarray}
\mu_j & = & \E(\T | S_j) = \vec \left( \left( \sum_{i = 1}^n I(b_i = j)w_i g(\X_i) \right) \E(h | S_j)^\top
\right), \nonumber \\
\Sigma_j & = & \V(\T | S_j) \nonumber \\
& = &
    \frac{w_{\cdot j}}{w_{\cdot j} - 1}  \V(h | S_j) \otimes
        \left(\sum_i I(b_i = j) w_i  \left( g(\X_i) \otimes g(\X_i)^\top\right) \right)
\label{expectcovar}
\\
& - & \frac{1}{w_{\cdot j} - 1}  \V(h | S_j)  \otimes \left(
        \sum_i I(b_i = j) w_i g(\X_i) \right)
\otimes \left( \sum_i I(b_i = j) w_i g(\X_i)\right)^\top
\nonumber
\end{eqnarray}
where $\otimes$ is the Kronecker product. The conditional expectation and
covariance of $\T$, aggregated over all $k$ blocks, are then given by
\begin{eqnarray*}
\mu  = \sum_{j = 1}^k \mu_j \text{ and } \Sigma = \sum_{j = 1}^k \Sigma_j.
\end{eqnarray*}


The linear statistic $\T$, its conditional expectation and covariance 
are stored in objects of class \Rclass{IndependenceTestStatistic}:
<<IndependenceTestStatistic, results = tex>>=
toLatex(c2t("IndependenceTestStatistic"))
@
Class \Rclass{VarCovar} represents either a complete covariance matrix 
or its diagonal elements only. The slot \Rarg{standardizedlinearstatistic}
contains the (possibly multivariate) linear statistic standardized by its 
conditional expectation and variance. An univariate test statistic, 
we highlight two important types of test statistics below,
are stored in slot \Rarg{teststatistic}. The \Rarg{estimates} slot
may contain parameter estimates where available.

\subsection{Test Statistics}

Univariate test statistics~$c$ mapping an observed linear
statistic $\mathbf{t} \in
\R^{pq}$ into the real line can be of arbitrary form. 
Having the conditional expectation and covariance at hand we are able to
standardize a linear statistic $\T \in \R^{pq}$ of the form
(\ref{linstat}) by
\begin{eqnarray*}
\frac{\mathbf{t} - \mu}{\text{diag}(\Sigma)^{1/2}}.
\end{eqnarray*}
In case of univariate linear statistics $\T$ (with $pq = 1$), the test statistic $c$
is simply the standardized linear statistic
\begin{eqnarray*}
c_\text{scalar}(\T, \mu, \Sigma) = \frac{\t - \mu}{\sqrt{\Sigma}}.
\end{eqnarray*} 
In the multivariate case ($pq > 1$), the choice of the test
statistic depends on the alternative we have in mind:
\begin{eqnarray*}
c_\text{max}(\mathbf{t}, \mu, \Sigma)  = \max \left| \frac{\mathbf{t} -
\mu}{\text{diag}(\Sigma)^{1/2}} \right|
\end{eqnarray*}
for the two-sided situation is to be replaced by
\begin{eqnarray*}
\min \left( \frac{\mathbf{t} - \mu}{\text{diag}(\Sigma)^{1/2}} \right)
    \quad \text{(less) and } 
\max \left( \frac{\mathbf{t} - \mu}{\text{diag}(\Sigma)^{1/2}} \right)
    \quad \text{(greater).}
\end{eqnarray*}
The definition of one- and two-sided $p$-values used for the computations in
the \pkg{coin} package is 

\begin{center}
\begin{tabular}{ll}
less & $\Prob(c(\T, \mu, \Sigma) \le c(\mathbf{t}, \mu, \Sigma))$ \\
greater & $\Prob(c(\T, \mu, \Sigma) \ge c(\mathbf{t}, \mu, \Sigma))$ \\
two-sided & $\Prob(|c(\T, \mu, \Sigma)| \le |c(\mathbf{t}, \mu, \Sigma)|)$.
\end{tabular}
\end{center}

For univariate statistics $c_\text{scalar}$ a special class
<<ScalarIndependenceTestStatistic, results = tex>>=
toLatex(c2t("ScalarIndependenceTestStatistic"))
@
is available. For the more general case, maximum-type statistics are represented by
objects of class \Rclass{MaxTypeIndependenceTestStatistic}:
<<MaxTypeIndependenceTestStatistic, results = tex>>=
toLatex(c2t("MaxTypeIndependenceTestStatistic"))
@
both defining a character vector specifying the alternative to 
test against (\Rcmd{two.sided}, \Rcmd{greater} and \Rcmd{less}).

Alternatively, a quadratic form $c_\text{quad}(\mathbf{t}, \mu, \Sigma)  =
(\mathbf{t} - \mu) \Sigma^+ (\mathbf{t} - \mu)^\top$ can be used as test statistic. It
is computationally more expensive because the Moore-Penrose 
inverse $\Sigma^+$ of $\Sigma$ is involved. Such statistics are represented
by objects of class \Rclass{QuadTypeIndependenceTestStatistic} defining slots 
for the conditional covariance matrix $\Sigma^+$ and
its rank (degrees of freedom):
<<QuadTypeIndependenceTestStatistic, results = tex>>=
toLatex(c2t("QuadTypeIndependenceTestStatistic"))
@

\subsection{Conditional Null Distribution}

The conditional distribution and thus the $p$-value
of the statistics $c(\mathbf{t}, \mu, \Sigma)$ can be
computed in several different ways. For some special forms of the
linear statistic, the exact distribution of the test statistic is tractable.
For two-sample problems, the shift-algorithm by \cite{axact-dist:1986} 
and \cite{exakte-ver:1987} and the split-up algorithm by 
\cite{vdWiel2001} are implemented as part of the package.
Conditional Monte-Carlo procedures can be used to approximate the exact
distribution. \cite{StrasserWeber1999} proved (Theorem 2.3) that the   
conditional distribution of linear statistics $\T$ with conditional    
expectation $\mu$ and covariance $\Sigma$ tends to a multivariate normal
distribution with parameters $\mu$ and $\Sigma$ as $n, w_{\cdot j} \rightarrow \infty$. 
Thus, the asymptotic conditional distribution of test statistics of the
form $c_\text{max}$ is normal and
can be computed directly in the univariate case ($pq = 1$)
or approximated by means of quasi-randomized Monte-Carlo  
procedures in the multivariate setting \citep{numerical-:1992}. For
quadratic forms
$c_\text{quad}$ which follow a $\chi^2$ distribution with degrees of freedom 
given by the rank of $\Sigma$ \citep[see][Chapter 29]{johnsonkotz1970}, exact
probabilities can be computed efficiently.

A null distribution is represented by either a distribution (and $P$-value) function
only
<<PValue, results = tex>>=
toLatex(c2t("PValue"))
@
or, where possible, is enriched by its density and quantile function:
<<NullDistribution, results = tex>>=
toLatex(c2t("NullDistribution"))
@
Currently, there are three classes extending \Rclass{NullDistribution} (without 
defining additional slots at the moment): \Rclass{ExactNullDistribution} (exact conditional
null distribution, computed for example via the shift-algorithm),
\Rclass{ApproxNullDistribution} (approximations of the exact conditional 
distribution using conditional Monte-Carlo procedures) and \Rclass{AsymptNullDistribution}
(asymptotic approximations via multivariate normal or $\chi^2$ distribution).

\subsection{Conditional Tests}

A conditional test is represented by a test statistic and its conditional null 
distribution (or an approximation thereof). In addition, 
a character string giving the name of the test procedure is defined 
in class \Rclass{IndependenceTest}:
<<IndependenceTest, results = tex>>=
toLatex(c2t("IndependenceTest"))
@

\section{Methods}

The following methods are defined for class \Rclass{IndependenceTestStatistic}:
\begin{description}
\item[\Rcmd{statistic()}:] extracts the linear statistic $\T$, 
                           the standardized statistic or test statistic.
\item[\Rcmd{expectation()}:] extracts the conditional expectation $\mu$.
\item[\Rcmd{covariance()}:] extracts the complete conditional covariance matrix 
                            $\Sigma$ (if available).
\item[\Rcmd{variance()}:] extracts the diagonal elements of the conditional covariance matrix
                          $\text{diag}(\Sigma)$.
\end{description}

For null distributions (class \Rclass{NullDistribution}), the following methods
are available:
\begin{description}
\item[\Rcmd{pvalue()}:] computes the $P$-value (plus a confidence interval, in case
 Monte-Carlo procedures have been used).
\item[\Rcmd{pperm()}:] evaluates the distribution function.
\item[\Rcmd{dperm()}:] evaluates the density function. 
\item[\Rcmd{qperm()}:] evaluates the quantile function.
\item[\Rcmd{support()}:] returns the support of the null distribution.
\end{description}
Of course, all methods are defined for objects inheriting from class 
\Rclass{IndependenceTest} as well. In addition, \Rcmd{show()} methods
are defined for class \Rclass{ScalarIndependenceTest}, \Rclass{MaxTypeIndependenceTest}
and \Rclass{QuadTypeIndependenceTest}, converting these \proglang{S4} 
objects to an informal \proglang{S3} object of class \Rclass{htest} for which
a \Rcmd{print()} method most \proglang{R} users are familiar with is available.

For the conditional versions of two-sample linear rank statistics for
location and scale parameters \citep{theory-of-:-1999}, e.g. Wilcoxon-Mann-Whitney,
Normal Scores and Ansari-Bradley tests, parameter estimates and
confidence intervals based on the conditional distribution of the test statistics
are implemented following the methods proposed by \cite{constructi:1972}. 
A \Rcmd{confint()} method is available for these special cases.

\section{Internal Functionality}

Functions for computing the linear statistic $\T$ for the original data as well
for permuted versions of the original data, the conditional expectation $\mu$
and conditional covariate matrix $\Sigma$ are coded in \proglang{C}. 
The shift and split-up algorithms \citep{axact-dist:1986,exakte-ver:1987,vdWiel2001}
for computing the exact null distribution in univariate two-sample problems
as well as conditional Monte-Carlo procedures for approximating the
exact conditional null distribution are implemented in \proglang{C} as well.
(In addition,
some helper functions, e.g. the Kronecker product etc., are coded in \proglang{C}.)
The complete \proglang{C} source code and its documentation can be accessed via
<<coin-doxygen, echo = TRUE, eval = FALSE>>=
browseURL(system.file("documentation/html/index.html", package = "coin"))
@
The naming scheme of the \proglang{C} routines distinguishes between functions
only called at \proglang{C} level (\code{C\_<foo>}) and functions which can 
be called from \proglang{R} via the \code{.Call} interface (\code{R\_<foo>}). 
Such functions are available for most of the internal \proglang{C} functions to enable
unit testing.

\section{User Interfaces}

While the internal structures make use of the \proglang{S4} class system,
the user interface is written in \proglang{S3} style. At least partially, 
this choice is due to the laziness of the authors, however, it was our aim
to mimic the user interfaces of the classical tests, such as \Rcmd{wilcox.test},
as closely as possible.

\subsection{General Independence Tests}

The \proglang{S3} generic function \Rcmd{independence\_test} has methods for tables (both
$\X$ and $\Y$ being univariate factors), formulae and 
and objects of class \Rclass{IndependenceProblem}. The definition of the latter is
\begin{Sinput}
independence_test(object, 
    teststat = c("max", "quad", "scalar"),
    distribution = c("asymptotic", "approximate", "exact"),
    alternative = c("two.sided", "less", "greater"),
    xtrafo = trafo, ytrafo = trafo, scores = NULL, 
    check = NULL, ...)
\end{Sinput}
Here, \Robject{object} describes the data and thus the null hypothesis. Argument 
\Rarg{xtrafo} refers to the transformation $g$ and \Rarg{ytrafo} to the 
influence function $h$ (function \Rcmd{trafo} implements reasonable defaults, 
see below) defining the linear statistic and its conditional expectation and covariance.
Three types of test statistics are hard-coded. The (approximation) of the 
null distribution to be used as reference distribution can be chosen either by a
character string or by function \Rcmd{exact}, \Rcmd{approximate} and \Rcmd{asymptotic}
which also take care for the correct specification of additional arguments, 
such as the number of permutations to draw randomly in a conditional Monte-Carlo procedure.

By default, the identify transformation is used for both $g$ and $h$ in case of numeric
variables $\X$ and $\Y$, respectively (function \Rcmd{id\_trafo}). Factors
are dummy-encoded (function \Rcmd{f\_trafo}) and censored variables are transformed to
log rank scores:
\begin{Sinput}
trafo(data, numeric_trafo = id_trafo, 
    factor_trafo = f_trafo, surv_trafo = logrank_trafo, 
    var_trafo = NULL, block = NULL)
\end{Sinput}
The framework is extensible by user-supplied transformations $g$ or influence functions $h$ 
specified as arguments to \Rcmd{trafo()}.

\subsection{Formula and Table Methods}

A \Rclass{formula} interface as well as a \Rclass{table} method for \Rcmd{independence\_test} 
are available in addition. The left hand side variables of a formula are interpreted 
as $\Y$ variables (univariate and possibly multivariate), the right hand side is taken
for $\X$ (univariate and multivariate as well). The blocking factor is specified after the pipe
symbol. So, for example, the formula
\begin{Sinput}
y1 + y2 ~ x1 + x2 | block
\end{Sinput}
leads to a test of independence between two $\Y$ variables and two $\X$ variables (in case
all variables are numeric our linear statistic is four-dimensional with 
$p = 2$ and $q = 2$) for each level in \Robject{block}. As usual, \Rarg{data}, \Rarg{weights}
and \Rarg{subset} arguments can be specified as well.

Two- and three-dimensional tables can be supplied to the \Rclass{table} method of
\Rcmd{independence\_test}. The third variable is then interpreted as block.

\subsection{Specialized Convenience Functions}

For a bunch of classical tests (some of them already implemented in base 
package \pkg{stats}), their conditional counterpart is made easily accessible. Wrapper functions
for the most important procedures, such as the Wilcoxon Mann-Whitney or Cochran-Mantel-Haenszel
tests, are listed in Table~\ref{confct}.

\begin{sidewaystable}
\begin{center}
\begin{tabular}{lllll} \\
%%%\multicolumn{5}{c}{Independent Samples} \\
Test & Function & \Rcmd{xtrafo} & \Rcmd{ytrafo} & \Rcmd{teststat} \\ \hline
\multicolumn{5}{c}{} \\
\multicolumn{5}{c}{Independent Samples} \\
\multicolumn{5}{c}{} \\
Wilcoxon-Mann-Whitney & \Rcmd{wilcox\_test()} & \Rcmd{f\_trafo()} & \Rcmd{rank()} &
\Rcmd{"scalar"} \\
Normal Quantiles & \Rcmd{normal\_test()} & \Rcmd{f\_trafo()} & \Rcmd{normal\_trafo()} &
\Rcmd{"scalar"} \\
Median & \Rcmd{median\_test()} & \Rcmd{f\_trafo()} & \Rcmd{median\_trafo()} &
\Rcmd{"scalar"} \\
Ansari-Bradley & \Rcmd{ansari\_test()} & \Rcmd{f\_trafo()} & \Rcmd{ansari\_trafo()} &
\Rcmd{"scalar"} \\
Log Rank & \Rcmd{surv\_test()} & \Rcmd{f\_trafo()} & \Rcmd{logrank\_trafo()} &
\Rcmd{"quad"} \\
Kruskal-Wallis & \Rcmd{kruskal\_test()} & \Rcmd{f\_trafo()} & \Rcmd{rank()} &
\Rcmd{"quad"} \\
Fligner & \Rcmd{fligner\_test()} & \Rcmd{f\_trafo()} & \Rcmd{fligner\_trafo()} &
\Rcmd{"quad"} \\
Spearman & \Rcmd{spearman\_test()} & \Rcmd{rank()} & \Rcmd{rank()} &
\Rcmd{"scalar"} \\
Cochran-Mantel-Haenszel & \Rcmd{cmh\_test()} & \Rcmd{f\_trafo()} & \Rcmd{f\_trafo()} &
\Rcmd{"quad"} \\
Pearson's $\chi^2$ & \Rcmd{chisq\_test()} & \Rcmd{f\_trafo()} & \Rcmd{f\_trafo()} &
\Rcmd{"quad"} \\
Cochran-Armitage / Linear Association & \Rcmd{lbl\_test()} & Scores & any &
\Rcmd{"scalar"} \\
K-Sample Permutation test & \Rcmd{oneway\_test()} & \Rcmd{f\_trafo()} & any & any \\
Maximally Selected Statistics & \Rcmd{maxstat\_test()} & \Rcmd{maxstat\_trafo()} & any & \Rcmd{"max"} \\
\multicolumn{5}{c}{} \\
\multicolumn{5}{c}{Dependent Samples} \\
\multicolumn{5}{c}{} \\
Friedman & \Rcmd{friedman\_test()} & \Rcmd{f\_trafo()} & \Rcmd{rank()} &
\Rcmd{"quad"} \\
Maxwell-Stuart & \Rcmd{mh\_test()} & \Rcmd{f\_trafo()} & \Rcmd{f\_trafo()} &
\Rcmd{"quad"} \\
Wilcoxon Signed Rank & \Rcmd{wilcoxsign\_test()} & \Rcmd{f\_trafo()} & \Rcmd{rank()} &
\Rcmd{"scalar"} \\ \hline
\end{tabular}
\caption{Convenience functions implementing the conditional counterparts of 
         the most important classical tests. \label{confct}}
\end{center}
\end{sidewaystable}

\subsection{An Example}

The job satisfaction data \citep[Table 7.8,][]{agresti2002} is a three-dimensional
contingency table with variables \Robject{Income} and \Robject{Job.Satisfaction}
for both \Robject{Gender}s. Here, we focus on conditional tests on independence 
of income and job satisfaction. The conditional Cochran-Mantel-Haenszel is
simply a $\chi^2$ statistic derived from the contingency table:
<<jobsatisfaction-it, echo = TRUE>>=
independence_test(jobsatisfaction, teststat = "quad")
@
which is the same as 
<<jobsatisfaction-it, echo = TRUE>>=
cmh_test(jobsatisfaction)
@
with linear statistic
<<jobsatisfaction-T, echo = TRUE>>=
statistic(cmh_test(jobsatisfaction), "linear")
@
This is the exactly the two-way classification
<<jobsatisfaction-margin, echo = TRUE>>=
margin.table(jobsatisfaction, 1:2)
@
i.e., the three-dimensional table aggregated over the block factor \Robject{Gender}.
This contingency table in standardized form reads
<<jobsatisfaction-stat, echo = TRUE>>=
statistic(cmh_test(jobsatisfaction), "standardized")
@
Instead of using a $\chi^2$ statistic collapsing the whole table via a quadratic form, we might
want to use the maximum of the absolute values of the standardized cells as test statistic.
This new (?) test is easily defined:
<<jobsatisfaction-max, echo = TRUE>>=
independence_test(jobsatisfaction, teststat = "max")
@
with its conditional asymptotical null distribution being 
immediately available (because of the joint multivariate normal probability
of the contingency table). Taking the ordinal scale level of both
variables into account, a linear by linear association test \citep{agresti2002}
is easily performed
<<jobsatisfaction-ordinal, echo = TRUE>>=
it <- independence_test(jobsatisfaction, 
    scores = list(Job.Satisfaction = c(1, 3, 4, 5),
                  Income = c(3, 10, 20, 35)),
    distribution = approximate(B = 10000))
pvalue(it)
@
For other examples, including examples with numeric variables, 
we refer to \cite{Hothorn:2006:AmStat}.

\section{Quality Assurance}

The test procedures implemented in package \pkg{coin} are continuously checked
against results obtained by the corresponding implementations in package
\pkg{stats} (where available). In addition, the test statistics and   
exact, approximative and asymptotic $p$-values for data examples given in the
\pkg{StatXact-6} 
user manual \citep{StatXact6} are compared with the results reported in the
\pkg{StatXact-6} manual. Step-down multiple adjusted $p$-values have been
checked against results reported by \Rcmd{mt.maxT} from package
\pkg{multtest} \citep{PKG:multtest}. For details on the test procedures we refer to
the \proglang{R}-transcript files in directory \code{coin/tests}.

\section{Acknowledgments}
 
We would like to thank Helmut Strasser for discussions on the theoretical framework.
Henric Nilsson provided clarification and examples for the Stuart-Maxwell test.
The work of T. Hothorn was supported by Deutsche Forschungsgemeinschaft (DFG) 
under grant HO 3242/1-3.

\bibliography{coin_jss}

\end{document}
